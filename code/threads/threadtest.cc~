// threadtest.cc 
//	Test cases for the threads assignment.

#include "copyright.h"
#include "system.h"
#include "synch.h"

// testnum is set in main.cc
int testnum = 1;

//----------------------------------------------------------------------
// SimpleThread
// 	Loop 5 times, yielding the CPU to another ready thread 
//	each iteration.
//
//	"which" is simply a number identifying the thread, for debugging
//	purposes.
//----------------------------------------------------------------------

void
SimpleThread(int which)
{
    int num;
    
    for (num = 0; num < 5; num++) {
	printf("*** thread %d looped %d times\n", which, num);
        currentThread->Yield();
    }
}

//----------------------------------------------------------------------
// ThreadTest1
// 	Set up a ping-pong between two threads, by forking a thread 
//	to call SimpleThread, and then calling SimpleThread ourselves.
//----------------------------------------------------------------------

void
ThreadTest1()
{
    DEBUG('t', "Entering ThreadTest1");

    Thread *t = new Thread("forked thread");

    t->Fork(SimpleThread, 1);
    SimpleThread(0);
}

//----------------------------------------------------------------------
// LockTest1
//----------------------------------------------------------------------

Lock *locktest1 = NULL;
Lock *locktest2 = NULL;
Lock *locktest3 = NULL;
Lock *locktest4 = NULL;
Lock *locktest5 = NULL;

void
LockThread1(int param)
{
    printf("L1:0\n");
    locktest1->Acquire();
    printf("L1:1\n");
    currentThread->Yield();
    printf("L1:2\n");
    locktest1->Release();
    printf("L1:3\n");
}

void
LockThread2(int param)
{
    printf("L2:0\n");
    locktest1->Acquire();
    printf("L2:1\n");
    currentThread->Yield();
    printf("L2:2\n");
    locktest1->Release();
    printf("L2:3\n");
}

void
LockThread3(int param)
{
    printf("L3:0\n");
    locktest3->Acquire();
    locktest3->Acquire();
}

void
LockThread4(int param)
{
    printf("L4:0\n");
    locktest4->Release();
}

void
LockThread4_1(int param)
{
    printf("L4:0\n");
    locktest4->Acquire();
    printf("L4:1\n");
    currentThread->Yield();
}

void
LockThread4_2(int param)
{
    printf("L4:0\n");
    locktest4->Release();
}

void
LockThread5(int param)
{
    printf("L5:0\n");
    locktest5->Acquire();
}


void
LockTest1()
{
    DEBUG('t', "Entering LockTest1");

    locktest1 = new Lock("LockTest1");

    Thread *t = new Thread("one");
    t->Fork(LockThread1, 0);
    t = new Thread("two");
    t->Fork(LockThread2, 0);
}

void
LockTest3()
{
    DEBUG('t', "Acquire  Lock Twice");

    locktest3 = new Lock("LockTest3");

    Thread *t = new Thread("one");
    t->Fork(LockThread3, 0);


}

void
LockTest4()
{
    DEBUG('t', "Release Lock that is not held");

    locktest4 = new Lock("LockTest4");
    
    Thread *t = new Thread("one");
    //NULL situation
    //t->Fork(LockThread4, 0);
    // Two thread situation
    t->Fork(LockThread4_1, 0);
    t = new Thread("two");
    t->Fork(LockThread4_2, 0);


}

void
LockTest5()
{
    DEBUG('t', "Delete a lock that is held");

    locktest5 = new Lock("LockTest5");

    Thread *t = new Thread("one");
    t->Fork(LockThread5, 0);
    currentThread->Yield();
    printf("%s",locktest5->holder);
    delete locktest5;

}

//----------------------------------------------------------------------
// ThreadTest
// 	Invoke a test routine.
//----------------------------------------------------------------------

void
ThreadTest()
{
    switch (testnum) {
    case 1:
	ThreadTest1();
	break;
    case 2:
	LockTest1();
	break;
    case 3:
        LockTest3();
        break;
    case 4:
        LockTest4();
        break;
    case 5:
        LockTest5();
        break;
    default:
	printf("No test specified.\n");
	break;
    }
}
